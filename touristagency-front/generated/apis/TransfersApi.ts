/* tslint:disable */
/* eslint-disable */
/**
 * Tourist agency
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Transfer,
  TransferIn,
} from '../models/index';
import {
    TransferFromJSON,
    TransferToJSON,
    TransferInFromJSON,
    TransferInToJSON,
} from '../models/index';

export interface CreateTransferRequest {
    transferIn?: TransferIn;
}

export interface DeleteTransferByIdRequest {
    id: string;
}

export interface ListTransfersRequest {
    limit?: number;
}

export interface ShowTransferByIdRequest {
    id: string;
}

/**
 * 
 */
export class TransfersApi extends runtime.BaseAPI {

    /**
     * Create a transfer
     */
    async createTransferRaw(requestParameters: CreateTransferRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transfer>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transfers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransferInToJSON(requestParameters.transferIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferFromJSON(jsonValue));
    }

    /**
     * Create a transfer
     */
    async createTransfer(requestParameters: CreateTransferRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transfer> {
        const response = await this.createTransferRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete specific transfer by id
     */
    async deleteTransferByIdRaw(requestParameters: DeleteTransferByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTransferById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/transfers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete specific transfer by id
     */
    async deleteTransferById(requestParameters: DeleteTransferByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTransferByIdRaw(requestParameters, initOverrides);
    }

    /**
     * List all transfers
     */
    async listTransfersRaw(requestParameters: ListTransfersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Transfer>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/transfers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TransferFromJSON));
    }

    /**
     * List all transfers
     */
    async listTransfers(requestParameters: ListTransfersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Transfer>> {
        const response = await this.listTransfersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Info for a specific transfer
     */
    async showTransferByIdRaw(requestParameters: ShowTransferByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transfer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling showTransferById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/transfers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransferFromJSON(jsonValue));
    }

    /**
     * Info for a specific transfer
     */
    async showTransferById(requestParameters: ShowTransferByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transfer> {
        const response = await this.showTransferByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

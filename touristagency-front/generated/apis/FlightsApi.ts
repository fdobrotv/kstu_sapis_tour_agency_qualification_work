/* tslint:disable */
/* eslint-disable */
/**
 * Tourist agency
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Flight,
  FlightIn,
} from '../models/index';
import {
    FlightFromJSON,
    FlightToJSON,
    FlightInFromJSON,
    FlightInToJSON,
} from '../models/index';

export interface CreateFlightRequest {
    flightIn?: FlightIn;
}

export interface DeleteFlightByIdRequest {
    id: string;
}

export interface ListFlightsRequest {
    limit?: number;
}

export interface ShowFlightByIdRequest {
    id: string;
}

/**
 * 
 */
export class FlightsApi extends runtime.BaseAPI {

    /**
     * Create a flight
     */
    async createFlightRaw(requestParameters: CreateFlightRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Flight>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/flights`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FlightInToJSON(requestParameters.flightIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FlightFromJSON(jsonValue));
    }

    /**
     * Create a flight
     */
    async createFlight(requestParameters: CreateFlightRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Flight> {
        const response = await this.createFlightRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete specific flight by id
     */
    async deleteFlightByIdRaw(requestParameters: DeleteFlightByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFlightById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/flights/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete specific flight by id
     */
    async deleteFlightById(requestParameters: DeleteFlightByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFlightByIdRaw(requestParameters, initOverrides);
    }

    /**
     * List all flights
     */
    async listFlightsRaw(requestParameters: ListFlightsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Flight>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/flights`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FlightFromJSON));
    }

    /**
     * List all flights
     */
    async listFlights(requestParameters: ListFlightsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Flight>> {
        const response = await this.listFlightsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Info for a specific flight
     */
    async showFlightByIdRaw(requestParameters: ShowFlightByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Flight>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling showFlightById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/flights/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FlightFromJSON(jsonValue));
    }

    /**
     * Info for a specific flight
     */
    async showFlightById(requestParameters: ShowFlightByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Flight> {
        const response = await this.showFlightByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

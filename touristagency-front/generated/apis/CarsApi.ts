/* tslint:disable */
/* eslint-disable */
/**
 * Tourist agency
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Car,
  CarIn,
} from '../models/index';
import {
    CarFromJSON,
    CarToJSON,
    CarInFromJSON,
    CarInToJSON,
} from '../models/index';

export interface CreateCarRequest {
    carIn?: CarIn;
}

export interface DeleteCarByIdRequest {
    id: string;
}

export interface ListCarsRequest {
    limit?: number;
}

export interface ShowCarByIdRequest {
    id: string;
}

/**
 * 
 */
export class CarsApi extends runtime.BaseAPI {

    /**
     * Create a car
     */
    async createCarRaw(requestParameters: CreateCarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Car>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/cars`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CarInToJSON(requestParameters.carIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CarFromJSON(jsonValue));
    }

    /**
     * Create a car
     */
    async createCar(requestParameters: CreateCarRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Car> {
        const response = await this.createCarRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete specific car by id
     */
    async deleteCarByIdRaw(requestParameters: DeleteCarByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCarById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cars/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete specific car by id
     */
    async deleteCarById(requestParameters: DeleteCarByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCarByIdRaw(requestParameters, initOverrides);
    }

    /**
     * List all cars
     */
    async listCarsRaw(requestParameters: ListCarsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Car>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cars`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CarFromJSON));
    }

    /**
     * List all cars
     */
    async listCars(requestParameters: ListCarsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Car>> {
        const response = await this.listCarsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Info for a specific car
     */
    async showCarByIdRaw(requestParameters: ShowCarByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Car>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling showCarById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cars/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CarFromJSON(jsonValue));
    }

    /**
     * Info for a specific car
     */
    async showCarById(requestParameters: ShowCarByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Car> {
        const response = await this.showCarByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

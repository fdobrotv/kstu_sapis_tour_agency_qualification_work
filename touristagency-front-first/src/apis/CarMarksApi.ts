/* tslint:disable */
/* eslint-disable */
/**
 * Tourist agency
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CarMark,
  CarMarkIn,
} from '../models/index';
import {
    CarMarkFromJSON,
    CarMarkToJSON,
    CarMarkInFromJSON,
    CarMarkInToJSON,
} from '../models/index';

export interface CreateCarMarkRequest {
    carMarkIn?: CarMarkIn;
}

export interface DeleteCarMarkByIdRequest {
    id: string;
}

export interface ListCarMarksRequest {
    limit?: number;
}

export interface ShowCarMarkByIdRequest {
    id: string;
}

/**
 * 
 */
export class CarMarksApi extends runtime.BaseAPI {

    /**
     * Create a car mark
     */
    async createCarMarkRaw(requestParameters: CreateCarMarkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CarMark>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/carMarks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CarMarkInToJSON(requestParameters.carMarkIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CarMarkFromJSON(jsonValue));
    }

    /**
     * Create a car mark
     */
    async createCarMark(requestParameters: CreateCarMarkRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CarMark> {
        const response = await this.createCarMarkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete specific car by id
     */
    async deleteCarMarkByIdRaw(requestParameters: DeleteCarMarkByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCarMarkById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/carMarks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete specific car by id
     */
    async deleteCarMarkById(requestParameters: DeleteCarMarkByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCarMarkByIdRaw(requestParameters, initOverrides);
    }

    /**
     * List all carMarks
     */
    async listCarMarksRaw(requestParameters: ListCarMarksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CarMark>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/carMarks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CarMarkFromJSON));
    }

    /**
     * List all carMarks
     */
    async listCarMarks(requestParameters: ListCarMarksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CarMark>> {
        const response = await this.listCarMarksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Info for a specific car mark
     */
    async showCarMarkByIdRaw(requestParameters: ShowCarMarkByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CarMark>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling showCarMarkById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/carMarks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CarMarkFromJSON(jsonValue));
    }

    /**
     * Info for a specific car mark
     */
    async showCarMarkById(requestParameters: ShowCarMarkByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CarMark> {
        const response = await this.showCarMarkByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

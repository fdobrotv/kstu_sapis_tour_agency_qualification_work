/* tslint:disable */
/* eslint-disable */
/**
 * Tourist agency
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Tour,
  TourIn,
} from '../models/index';
import {
    TourFromJSON,
    TourToJSON,
    TourInFromJSON,
    TourInToJSON,
} from '../models/index';

export interface CreateTourRequest {
    tourIn?: TourIn;
}

export interface DeleteTourByIdRequest {
    id: string;
}

export interface ListToursRequest {
    limit?: number;
}

export interface ShowTourByIdRequest {
    id: string;
}

/**
 * 
 */
export class ToursApi extends runtime.BaseAPI {

    /**
     * Create a tour
     */
    async createTourRaw(requestParameters: CreateTourRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tour>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/tours`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TourInToJSON(requestParameters.tourIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TourFromJSON(jsonValue));
    }

    /**
     * Create a tour
     */
    async createTour(requestParameters: CreateTourRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tour> {
        const response = await this.createTourRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete specific tour by id
     */
    async deleteTourByIdRaw(requestParameters: DeleteTourByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTourById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tours/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete specific tour by id
     */
    async deleteTourById(requestParameters: DeleteTourByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTourByIdRaw(requestParameters, initOverrides);
    }

    /**
     * List all tours
     */
    async listToursRaw(requestParameters: ListToursRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Tour>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tours`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TourFromJSON));
    }

    /**
     * List all tours
     */
    async listTours(requestParameters: ListToursRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Tour>> {
        const response = await this.listToursRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Info for a specific tour
     */
    async showTourByIdRaw(requestParameters: ShowTourByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tour>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling showTourById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tours/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TourFromJSON(jsonValue));
    }

    /**
     * Info for a specific tour
     */
    async showTourById(requestParameters: ShowTourByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tour> {
        const response = await this.showTourByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

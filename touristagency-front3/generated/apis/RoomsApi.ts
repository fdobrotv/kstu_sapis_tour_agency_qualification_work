/* tslint:disable */
/* eslint-disable */
/**
 * Tourist agency
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Room,
  RoomIn,
} from '../models/index';
import {
    RoomFromJSON,
    RoomToJSON,
    RoomInFromJSON,
    RoomInToJSON,
} from '../models/index';

export interface CreateRoomRequest {
    roomIn?: RoomIn;
}

export interface DeleteRoomByIdRequest {
    id: string;
}

export interface ListRoomsRequest {
    limit?: number;
}

export interface ShowRoomByIdRequest {
    id: string;
}

/**
 * 
 */
export class RoomsApi extends runtime.BaseAPI {

    /**
     * Create a room
     */
    async createRoomRaw(requestParameters: CreateRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Room>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoomInToJSON(requestParameters.roomIn),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomFromJSON(jsonValue));
    }

    /**
     * Create a room
     */
    async createRoom(requestParameters: CreateRoomRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Room> {
        const response = await this.createRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete specific room by id
     */
    async deleteRoomByIdRaw(requestParameters: DeleteRoomByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRoomById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete specific room by id
     */
    async deleteRoomById(requestParameters: DeleteRoomByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRoomByIdRaw(requestParameters, initOverrides);
    }

    /**
     * List all rooms
     */
    async listRoomsRaw(requestParameters: ListRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Room>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoomFromJSON));
    }

    /**
     * List all rooms
     */
    async listRooms(requestParameters: ListRoomsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Room>> {
        const response = await this.listRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Info for a specific room
     */
    async showRoomByIdRaw(requestParameters: ShowRoomByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Room>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling showRoomById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomFromJSON(jsonValue));
    }

    /**
     * Info for a specific room
     */
    async showRoomById(requestParameters: ShowRoomByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Room> {
        const response = await this.showRoomByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
